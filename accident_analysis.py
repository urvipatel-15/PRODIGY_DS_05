# -*- coding: utf-8 -*-
"""Accident Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14M_G3Gomo4RjOzovQlDiy8uWy7DQj39X
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.impute import SimpleImputer

df = pd.read_csv('/content/drive/MyDrive/cleaned.csv')

df.describe(include='all')

df.head()

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(data=df, x='Age_band_of_driver')
plt.title('Distribution of Age Bands')
plt.show()

sns.countplot(data=df, x='Sex_of_driver')
plt.title('Accidents by Gender')
plt.show()

sns.countplot(data=df, x='Road_surface_type', hue='Accident_severity')
plt.title('Severity of Accidents by Road Conditions')
plt.show()

sns.countplot(data=df, x='Weather_conditions', hue='Accident_severity')
plt.title('Accidents by Weather Conditions')
plt.show()

cols_with_unknown = df.columns[df.isin(['Unknown']).any()]
for col in cols_with_unknown:
    df[col] = df[col].replace('Unknown', np.nan)

# Map 'Age_band_of_driver' strings to numerical values
age_band_mapping = {'18-30': 1, '31-50': 2, '51-80': 3, '81-100': 4}
df['Age_band_of_driver'] = df['Age_band_of_driver'].map(age_band_mapping)

# Map 'Driving_experience' strings to numerical values
driving_exp_mapping = {'Below 1yr': 0, '1-2yr': 1, '3-4yr': 2, '5-7yr': 3, '8-10yr': 4, '11-15yr': 5, '16-20yr': 6, '21-30yr': 7, 'Above 30yr': 8}
df['Driving_experience'] = df['Driving_experience'].map(driving_exp_mapping)

# Drop unnecessary fields (if any)
# Uncomment the following line if you want to drop 'Pedestrian_movement' and 'Cause_of_accident'
# df = df.drop(['Pedestrian_movement', 'Cause_of_accident'], axis=1)

# Encode string fields using One-Hot Encoding
categorical_fields = ['Sex_of_driver', 'Educational_level', 'Vehicle_driver_relation',
                      'Lanes_or_Medians', 'Types_of_Junction', 'Road_surface_type',
                      'Light_conditions', 'Weather_conditions', 'Type_of_collision',
                      'Vehicle_movement']

# Create a list to store the encoded features
encoded_features = []

for field in categorical_fields:
    # Label encode the categorical field
    label_encoder = LabelEncoder()
    df[field] = label_encoder.fit_transform(df[field])

    # One-hot encode the label-encoded field
    one_hot_encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
    one_hot_encoded = one_hot_encoder.fit_transform(df[[field]])

    # Concatenate the one-hot encoded columns to the encoded_features list
    one_hot_encoded_df = pd.DataFrame(one_hot_encoded, columns=[f"{field}_{col}" for col in range(one_hot_encoded.shape[1])])
    encoded_features.append(one_hot_encoded_df)

# Combine the encoded features with the original numerical fields
encoded_data = pd.concat([df[['Age_band_of_driver', 'Driving_experience', 'Accident_severity']]] + encoded_features, axis=1)

# Impute missing values with the mean of the respective column
imputer = SimpleImputer(strategy='mean')
encoded_data = pd.DataFrame(imputer.fit_transform(encoded_data), columns=encoded_data.columns)

# Split the data into features and target
X = encoded_data.drop('Accident_severity', axis=1)
y = encoded_data['Accident_severity']

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
rf_classifier.fit(X_train, y_train)

# Make predictions on the test set
y_pred = rf_classifier.predict(X_test)

# Calculate the accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

